                                - INTRODUCTION -

This directory is the root directory for the Software ChipSet, a collection
of reusable software components.  See the file named "README.md" in this
directory for additional information regarding the Software ChipSet's goals
and capabilities.

The src directory contains additional directories containing source code for
each of the components.  Each component has its own "README" file to describe
its capabilities and limitations.

The Makefile supports a multi-root build system such that the software can
be compiled in-place in the source tree, or derived files can be stored in
a different directory tree.  The installation then copies the final products
from the build tree to the system's install area, which is the /usr/local
tree by default.  Please see the file named "BUILD" in this directory for a
detailed description of the build scaffolding.


                           - UNPACKING INSTRUCTIONS -

The Software ChipSet is distributed in a number of ways.  Following are
the unpacking instructions for each of the distribution media on Unix
systems.

The build instructions below reference the directory that is the top of
the source tree.  The location of that directory depends on the method
used to obtain the source code.  In the following instructions, the
fullpath to that directory will be stored in a shell variable named
SRCROOT for easy reference as you progress to the build instructions.

-- GIT --

Software ChipSet can be downloaded from Github using the following command
in an empty directory:

	git clone https://github.com/paulmsander/software-chipset.git

If you have an account on Github, you can use this command instead:

	git clone git@github.com:paulmsander/software-chipset.git

When obtaining Software ChipSet using Git, the top of the source tree
is the software-chipset directory created by the "git clone" command.

Save the fullpath of the root of the source tree in a shell variable
for easy reference later:

	SRCROOT=$PWD/software-chipset

-- TAR --

Software ChipSet is distributed in "tar" archives created by its own
Makefile system, which are compressed using gzip.  Store the chipset.tgz
file in an empty directory and run this command.

	gzip -cd chipset.tgz | tar xvfo -

When obtaining Software ChipSet from a tar archive in this way, the
present working directory becomes the top of the source tree.

Save the fullpath of the root of the source tree in a shell variable
for easy reference later:

	SRCROOT=$PWD

-- ZIP --

Software ChipSet is distributed by Github in "zip" archives.  You can download
a zip file from this URL:

	https://github.com/paulmsander/software-chipset/archive/master.zip

Copy the downloaded file to an empty directory and run this command (which
may be done automatically on some systems):

	unzip master.zip

When obtaining Software ChipSet in a zip archive from Github, the top of the
source tree is the software-chipset-master directory under which the zip
archive was unzipped.

Save the fullpath of the root of the source tree in a shell variable
for easy reference later:

	SRCROOT=$PWD/software-chipset-master



                             - BUILD INSTRUCTIONS -

Make sure that Gnu Make is installed on your system.  It is the native
build tool provided an most Linux systems.  On other Unix-based systems
such as FreeBSD and OpenIndiana, it must be installed as an after-market
package.  On those systems, you must invoke it as "gmake" rather than "make".

Store the fullpath of the top of the source tree in a shell variable.
The top of the source tree is described in the unpacking instructions above.
Set the variable SRCROOT to the fullpath of that directory for easy reference
later in this procedure.  Then cd to that directory.

Configure the build procedures in this directory as needed for your system.
The common.mk file may need changes, as it is used by all of the makefiles
included with the Software ChipSet.

The makefile system supports three modes of operation:

1.  Derived files are stored in the source tree.
2.  Derived files are stored outside the source tree in a build tree, but the
    build is initiated from the source tree.
3.  Derived files are stored outside the source tree in a build tree, and the
    build is initiated from the build tree.

Method 1:

To run the build in the source tree, perform this procedure:

	cd $SRCROOT
	make all

Method 2:

To have the build store derived files in a build tree, identify a directory
in which to store the files.  Set a shell variable named BUILDROOT to the
fullpath of that directory.

Initate the build from the source tree using this procedure:

	cd $SRCROOT
	make BUILDROOT=$BUILDROOT all

Method 3:

To have the build store derived files in a build tree, identify a directory
in which to store the files.  Set a shell variable named BUILDROOT to the
fullpath of that directory.

Initate the build from the build tree using this procedure:

	mkdir -p $BUILDROOT
	cd $BUILDROOT
	make -f $SRCROOT/Makefile all

NOTE:  On systems that don't supply Gnu Make as the native build tool
(e.g. FreeBSD or OpenIndiana), it must be installed from an after-market
package.  Once installed, it must be invoked using the "gmake" command
rather than "make" in the above procedures.

NOTE:  On systems that don't have a native C compiler (e.g. OpenIndiana),
you must install Gnu CC from an after-market package.  Once it is installed,
add the following macro definition to any of the "make" command lines
above:  CC=gcc

Each of the components has a test program.  These can be run by building
the "test" target (rather than the "all" target) in any of the above
"make" commands.  This builds all of the test cases and runs them, and
gives a pass/fail indication for each test and for the entire suite.

To test the installation of Software ChipSet, use any of the above methods
to build the "install" target (rather than the "all" target), and adding the
-n option to prevent actual changes to the system.  Review Make's output
to confirm that the archive file, headers, and man pages are all installed
in their proper locations.  (The /usr/local tree is the usual location.)
If this is incorrect, edit the common.mk file to set the correct locations
and repeat the test.  When the locations are correct, omit the -n option
from the Make command line to copy the files to their final destinations.
This may require super-user access (via su or sudo, for example) due to
filesystem permissions.

After installing the components, you may clean up the occupied disk space
by using any of the above methods to build the "clean" target rather than
the "all" target.  When using Methods 2 or 3, the build tree's empty
directory structure is left behind and can be removed using this procedure:

	cd $SRCROOT
	rm -rf $BUILDROOT

