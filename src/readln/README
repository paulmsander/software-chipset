This directory contains source code to an implementation of a safe text
line input routine.  An entire line of text can be read from an arbitrary
source, regardless of its length.

This implementation has been placed in the public domain by its author,
Paul Sander, to be used as you wish.  However, if you add neat new features,
I'd appreciate having a copy sent to me at paul@sander.cupertino.ca.us .

You are strongly urged to review the Makefile.  It contains a lot of stuff
that is specific to my system, but configuring it to your needs should be
straightforward.  The most important places to look are at the macros near
the beginning of the file, and in the "installDocs" and "installLib" recipes.

To build the library on a Unix system, invoke "make".  VMS users will need
to translate the Makefile into a DESCRIP.MMS file.  Others will need to do
something different, of course.  The code should compile under either an
ANSI or a K&R compiler.  If your implementation predates the "void" type,
you should add a typedef or macro to the .h files to alias the "char" type
as "void".

Online documentation has been provided.  It consists of source code using
the Unix "man" macros, and also ASCII plaintext and PostScript versions
produced by nroff and troff, respectively.  The plaintext and PostScript
documents can be rebuilt by invoking the "make docs" command.

Installation should be done by invoking other tools provided with the
Software ChipSet that package the components up and install them in one
pass.  For details about using these tools, please see the ../../README
file.

There is a test program that performs a very rigorous test of the routines.
The program is built by invoking "make test".  It is also built as the
result of "make all" or simply "make".  To run the test, invoke the
command "./test | tail -1".  This should write "TEST PASSED" to the
controlling tty.  This program uses a file called "test.in" as test
data.  Note that the last character of the test.in file must NOT be
a newline for the test program to operate correctly.

Coverage of the test program is 91.78%, considering branch, loop, multiple
condition, and operator coverage.  There are 6 conditions left that are
related to the failure of malloc, which can't be easily simulated.
